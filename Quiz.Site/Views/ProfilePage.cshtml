@using Quiz.Site.Models.ContentModels
@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage<ProfilePageContentModel>
@using Umbraco.Cms.Core.Security

@inject IMemberManager memberManager

@{
    Layout = "DashboardMaster.cshtml";
    var hasQuizResults = Model?.ProfileResults?.QuizResults != null && (Model?.ProfileResults?.QuizResults?.Any() ?? false);
    var scores = hasQuizResults ? Model.ProfileResults.QuizResults.Select(x => x.Score) : Enumerable.Empty<int>();
    var scoreCount = hasQuizResults ? scores.Count() : 0;
    var xAxisValues = "";

    var xAxisLabels = "";
    if(hasQuizResults)
    {
        @for(var i = 1; i <= scoreCount; i++) 
        {
            var isLast = i == scoreCount;
            xAxisLabels += $"\"{i}\"{(isLast ? null : ",")}";
        }
            
    }
}

@await Component.InvokeAsync("ProfileResults", Model.ProfileResults)

@if(hasQuizResults)
{
    <div class="row mt-2 mb-4">
        <div class="col-md-12 mt-md-0 mt-4">
            <div class="card z-index-2">
                <div class="card-header p-3 pb-0">
                    <h6>My Results History</h6>
                </div>
                <div class="card-body p-3">
                    <div class="chart">
                        <canvas id="results-history" class="chart-canvas" height="300"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@await Component.InvokeAsync("MyBadges", Model.ProfileResults.Profile)

@section scriptsBottom {
    <script src="/assets/js/plugins/chartjs.min.js"></script>
<script>
    // Line chart with gradient
    var ctx2 = document.getElementById("results-history").getContext("2d");

    var gradientStroke1 = ctx2.createLinearGradient(0, 230, 0, 50);

    gradientStroke1.addColorStop(1, 'rgba(94, 114, 228, 0.2)');
    gradientStroke1.addColorStop(0.2, 'rgba(72,72,176,0.0)');
    gradientStroke1.addColorStop(0, 'rgba(94, 114, 228,0)'); //purple colors

    var gradientStroke2 = ctx2.createLinearGradient(0, 230, 0, 50);

    gradientStroke2.addColorStop(1, 'rgba(20,23,39,0.2)');
    gradientStroke2.addColorStop(0.2, 'rgba(72,72,176,0.0)');
    gradientStroke2.addColorStop(0, 'rgba(20,23,39,0)'); //purple colors

    new Chart(ctx2, {
      type: "line",
      data: {
        @if(hasQuizResults)
        {
            <text>labels: [ @Html.Raw(xAxisLabels) ],</text>
        }
        datasets: [{
            label: "Score",
            tension: 0.4,
            borderWidth: 0,
            pointRadius: 0,
            borderColor: "#5e72e4",
            borderWidth: 3,
            backgroundColor: gradientStroke1,
            fill: true,
        @if(hasQuizResults)
        {
            <text>data: [ @(string.Join(",", scores)) ],</text>
        }
            maxBarThickness: 6
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false,
          }
        },
        interaction: {
          intersect: false,
          mode: 'index',
        },
        scales: {
          y: {
            min: 0,
            max: 11,
            grid: {
              drawBorder: false,
              display: true,
              drawOnChartArea: true,
              drawTicks: false,
              borderDash: [5, 5]
            },
            ticks: {
              display: true,
              padding: 10,
              color: '#b2b9bf',
              font: {
                size: 11,
                family: "Open Sans",
                style: 'normal',
                lineHeight: 2
              },
            }
          },
          x: {
            grid: {
              drawBorder: false,
              display: false,
              drawOnChartArea: false,
              drawTicks: false,
              borderDash: [5, 5]
            },
            ticks: {
              display: true,
              color: '#b2b9bf',
              padding: 10,
              font: {
                size: 11,
                family: "Open Sans",
                style: 'normal',
                lineHeight: 2
              },
            }
          },
        },
      },
    });
    </Script>
}